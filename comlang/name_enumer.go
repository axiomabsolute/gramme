// Code generated by "enumer -type=Name -json -text"; DO NOT EDIT.

//
package grammar

import (
	"encoding/json"
	"fmt"
)

const _NameName = "UnaryPrepTextObject"

var _NameIndex = [...]uint8{0, 5, 19}

func (i Name) String() string {
	if i < 0 || i >= Name(len(_NameIndex)-1) {
		return fmt.Sprintf("Name(%d)", i)
	}
	return _NameName[_NameIndex[i]:_NameIndex[i+1]]
}

var _NameValues = []Name{0, 1}

var _NameNameToValueMap = map[string]Name{
	_NameName[0:5]:  0,
	_NameName[5:19]: 1,
}

// NameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NameString(s string) (Name, error) {
	if val, ok := _NameNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Name values", s)
}

// NameValues returns all values of the enum
func NameValues() []Name {
	return _NameValues
}

// IsAName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Name) IsAName() bool {
	for _, v := range _NameValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Name
func (i Name) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Name
func (i *Name) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Name should be a string, got %s", data)
	}

	var err error
	*i, err = NameString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Name
func (i Name) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Name
func (i *Name) UnmarshalText(text []byte) error {
	var err error
	*i, err = NameString(string(text))
	return err
}
