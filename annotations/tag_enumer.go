// Code generated by "enumer -type=Tag -json -text"; DO NOT EDIT.

//
package annotations

import (
	"encoding/json"
	"fmt"
)

const _TagName = "BUFFERLINEWORD"

var _TagIndex = [...]uint8{0, 6, 10, 14}

func (i Tag) String() string {
	if i < 0 || i >= Tag(len(_TagIndex)-1) {
		return fmt.Sprintf("Tag(%d)", i)
	}
	return _TagName[_TagIndex[i]:_TagIndex[i+1]]
}

var _TagValues = []Tag{0, 1, 2}

var _TagNameToValueMap = map[string]Tag{
	_TagName[0:6]:   0,
	_TagName[6:10]:  1,
	_TagName[10:14]: 2,
}

// TagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TagString(s string) (Tag, error) {
	if val, ok := _TagNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Tag values", s)
}

// TagValues returns all values of the enum
func TagValues() []Tag {
	return _TagValues
}

// IsATag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Tag) IsATag() bool {
	for _, v := range _TagValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Tag
func (i Tag) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Tag
func (i *Tag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Tag should be a string, got %s", data)
	}

	var err error
	*i, err = TagString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Tag
func (i Tag) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Tag
func (i *Tag) UnmarshalText(text []byte) error {
	var err error
	*i, err = TagString(string(text))
	return err
}
