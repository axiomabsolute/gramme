// Code generated by "enumer -type=PartOfSpeechTag -json -text"; DO NOT EDIT.

//
package commands

import (
	"encoding/json"
	"fmt"
)

const _PartOfSpeechTagName = "VerbNounTextObjectPreposition"

var _PartOfSpeechTagIndex = [...]uint8{0, 4, 8, 18, 29}

func (i PartOfSpeechTag) String() string {
	if i < 0 || i >= PartOfSpeechTag(len(_PartOfSpeechTagIndex)-1) {
		return fmt.Sprintf("PartOfSpeechTag(%d)", i)
	}
	return _PartOfSpeechTagName[_PartOfSpeechTagIndex[i]:_PartOfSpeechTagIndex[i+1]]
}

var _PartOfSpeechTagValues = []PartOfSpeechTag{0, 1, 2, 3}

var _PartOfSpeechTagNameToValueMap = map[string]PartOfSpeechTag{
	_PartOfSpeechTagName[0:4]:   0,
	_PartOfSpeechTagName[4:8]:   1,
	_PartOfSpeechTagName[8:18]:  2,
	_PartOfSpeechTagName[18:29]: 3,
}

// PartOfSpeechTagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PartOfSpeechTagString(s string) (PartOfSpeechTag, error) {
	if val, ok := _PartOfSpeechTagNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PartOfSpeechTag values", s)
}

// PartOfSpeechTagValues returns all values of the enum
func PartOfSpeechTagValues() []PartOfSpeechTag {
	return _PartOfSpeechTagValues
}

// IsAPartOfSpeechTag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PartOfSpeechTag) IsAPartOfSpeechTag() bool {
	for _, v := range _PartOfSpeechTagValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PartOfSpeechTag
func (i PartOfSpeechTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PartOfSpeechTag
func (i *PartOfSpeechTag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PartOfSpeechTag should be a string, got %s", data)
	}

	var err error
	*i, err = PartOfSpeechTagString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PartOfSpeechTag
func (i PartOfSpeechTag) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PartOfSpeechTag
func (i *PartOfSpeechTag) UnmarshalText(text []byte) error {
	var err error
	*i, err = PartOfSpeechTagString(string(text))
	return err
}
